--- download/webkit/Source/JavaScriptCore/heap/Heap.cpp	2019-09-17 23:35:30.000000000 +0800
+++ target/webkit/Source/JavaScriptCore/heap/Heap.cpp	2019-09-17 23:18:36.000000000 +0800
@@ -88,7 +88,7 @@
 #include <wtf/SimpleStats.h>
 #include <wtf/Threading.h>
 
-#if PLATFORM(IOS_FAMILY)
+#if PLATFORM(IOS_FAMILY) || defined(__ANDROID__)
 #include <bmalloc/bmalloc.h>
 #endif
 
@@ -129,7 +129,7 @@
     if (VM::isInMiniMode())
         return Options::miniVMHeapGrowthFactor() * heapSize;
 
-#if PLATFORM(IOS_FAMILY)
+#if PLATFORM(IOS_FAMILY) || defined(__ANDROID__)
     size_t memoryFootprint = bmalloc::api::memoryFootprint();
     if (memoryFootprint < ramSize * Options::smallHeapRAMFraction())
         return Options::smallHeapGrowthFactor() * heapSize;
@@ -538,7 +538,7 @@
 
 bool Heap::overCriticalMemoryThreshold(MemoryThresholdCallType memoryThresholdCallType)
 {
-#if PLATFORM(IOS_FAMILY)
+#if PLATFORM(IOS_FAMILY) || defined(__ANDROID__)
     if (memoryThresholdCallType == MemoryThresholdCallType::Direct || ++m_precentAvailableMemoryCachedCallCount >= 100) {
         m_overCriticalMemoryThreshold = bmalloc::api::percentAvailableMemoryInUse() > Options::criticalGCMemoryThreshold();
         m_precentAvailableMemoryCachedCallCount = 0;
@@ -2332,7 +2332,7 @@
         }
     }
 
-#if PLATFORM(IOS_FAMILY)
+#if PLATFORM(IOS_FAMILY) || defined(__ANDROID__)
     // Get critical memory threshold for next cycle.
     overCriticalMemoryThreshold(MemoryThresholdCallType::Direct);
 #endif
@@ -2629,7 +2629,7 @@
     } else {
         size_t bytesAllowedThisCycle = m_maxEdenSize;
 
-#if PLATFORM(IOS_FAMILY)
+#if PLATFORM(IOS_FAMILY) || defined(__ANDROID__)
         if (overCriticalMemoryThreshold())
             bytesAllowedThisCycle = std::min(m_maxEdenSizeWhenCritical, bytesAllowedThisCycle);
 #endif
--- download/webkit/Source/JavaScriptCore/heap/Heap.h	2019-09-17 23:35:36.000000000 +0800
+++ target/webkit/Source/JavaScriptCore/heap/Heap.h	2019-09-17 23:18:36.000000000 +0800
@@ -739,7 +739,7 @@
     CurrentThreadState* m_currentThreadState { nullptr };
     Thread* m_currentThread { nullptr }; // It's OK if this becomes a dangling pointer.
 
-#if PLATFORM(IOS_FAMILY)
+#if PLATFORM(IOS_FAMILY) || defined(__ANDROID__)
     unsigned m_precentAvailableMemoryCachedCallCount;
     bool m_overCriticalMemoryThreshold;
 #endif
